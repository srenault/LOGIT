package models

import com.mongodb.casbah.Imports._
import scala.util.parsing.json._

import sjson.json._
import DefaultProtocol._
import JsonSerialization._

import db.MongoDB

case class Log(projectName: String, data: String =  "{}") {
}

object Log extends MongoDB {
  val TABLE_NAME = "logs"

//  implicit val LogFormat: Format[Log] = asProduct2("projectName", "name")(Log)(Log.unapply(_).get)

  def create(log: Log) = {
    /*val mongoLog = MongoDBObject.newBuilder
    mongoLog ++= 

    mongoLog +=  "project" -> log.projectName
    insert(TABLE_NAME, mongoLog.result)*/
  }

  def apply(projectName: String, log: String) = {
    /*JSON.parseFull(log) match {
      case Some(json: Map[String, Any]) => Log(projectName, json)
      case _ => Log(projectName, Map[String, Any]())
    }*/
    
  }
}


case class LogEntry(projectName: String, data: String = "{}") extends MongoDB

object LogEntry extends MongoDB {
  
  val TABLE_NAME = "logs"
  
  implicit val LogEntryFormat: Format[LogEntry] = asProduct2("projectName", "data")(LogEntry.apply)(LogEntry.unapply(_).get)
}
